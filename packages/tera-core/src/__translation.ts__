// import axios from 'axios';
// import { SUPPORTED_LANGUAGES, DEFAULT_LANGUAGE } from '@/constants/trans';
import i18n from './i18n';

import languages from './data/languages.json';

// const DEFAULT_LANGUAGE = 'en';
// const SUPPORTED_LANGUAGES = ['en'];

export const Trans = {
  get defaultLanguage() {
    return 'en'; // return DEFAULT_LANGUAGE;
  },
  get supportedLanguages() {
    return languages;
  },
  get currentLanguage() {
    return i18n.locale;
  },
  set currentLanguage(lang) {
    i18n.locale = lang;
  },

  getUserSupportedLang() {
    const userPreferredLang = Trans.getUserLang();

    // Check if user preferred browser lang is supported
    if (Trans.isLangSupported(userPreferredLang.lang)) {
      return userPreferredLang.lang;
    }
    // Check if user preferred lang without the ISO is supported
    if (Trans.isLangSupported(userPreferredLang.langNoISO)) {
      return userPreferredLang.langNoISO;
    }
    return Trans.defaultLanguage;
  },

  getUserLang() {
    const navigator = window.navigator as any;
    const lang =
      navigator.language || navigator.userLanguage || Trans.defaultLanguage;
    return {
      lang,
      langNoISO: lang.split('-')[0],
    };
  },

  setI18nLanguageInServices(lang) {
    Trans.currentLanguage = lang;
    // axios.defaults.headers.common['Accept-Language'] = lang;
    document.querySelector('html')!.setAttribute('lang', lang);
    return lang;
  },

  changeLanguage(lang) {
    console.log({ lang });
    if (!Trans.isLangSupported(lang)) {
      return Promise.reject(new Error('Language not supported'));
    }
    if (i18n.locale === lang) {
      return Promise.resolve(lang);
    } // has been loaded prior
    return Trans.loadLanguageFile(lang).then((msgs) => {
      i18n.setLocaleMessage(lang, msgs.default || msgs);
      return Trans.setI18nLanguageInServices(lang);
    });
  },

  loadLanguageFile(lang) {
    return import(/* webpackChunkName: "lang-[request]" */ `./lang/${lang}`);
  },

  isLangSupported(lang: string) {
    return Trans.supportedLanguages.map((l) => l.locale).includes(lang);
  },

  routeMiddleware(to, from, next) {
    const lang = to.params.lang;
    if (!Trans.isLangSupported(lang)) {
      return next(Trans.getUserSupportedLang());
    }
    return Trans.changeLanguage(lang).then(() => next());
  },
};
